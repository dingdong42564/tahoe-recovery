name: Tahoe builder 02-10 (latest) Recovery Image

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Clone gibMacOS
        run: git clone https://github.com/corpnewt/gibMacOS.git

      - name: Download macOS Installer (stable release)
        run: python ./gibMacOS/gibMacOS.py -c release -v Tahoe -m 26 -o /tmp/Tahoe-stable-latest

      - name: Install the assistant
        run: sudo installer -pkg /tmp/Tahoe-stable-latest/InstallAssistant.pkg -target /

      - name: Generate macOS Installer
        run: |
          INSTALLER=$(ls -d /Applications/Install*.app | head -n 1 || true)
          if [ ! -d "$INSTALLER" ]; then
            echo "Could not find Install macOS app in /Applications"
            ls -l /Applications
            exit 1
          fi

          SIZE_MB=$(du -sm "$INSTALLER" | cut -f1)
          EXTRA=$(echo "($SIZE_MB * 0.4 + 0.999)/1" | bc)
          TOTAL_MB=$(( SIZE_MB + EXTRA ))

          echo "Installer size: $SIZE_MB MB"
          echo "Allocating DMG size: $TOTAL_MB MB"

          sudo hdiutil create -o /tmp/Tahoe -size ${TOTAL_MB}m -volname 'Tahoe' -layout SPUD -fs HFS+J
          sudo hdiutil attach /tmp/Tahoe.dmg -noverify -mountpoint /Volumes/Tahoe
          sleep 10
          sudo "$INSTALLER/Contents/Resources/createinstallmedia" --volume /Volumes/Tahoe --nointeraction

          INSTALL_VOL=$(ls -d /Volumes/Install* | head -n 1 || true)
          if [ ! -d "$INSTALL_VOL" ]; then
            echo "Could not find installer volume in /Volumes"
            ls -l /Volumes
            exit 1
          fi
          echo "Found installer volume: $INSTALL_VOL"

          cp -R "$INSTALL_VOL/BaseSystem" /tmp/BaseSystem

      - name: Upload BaseSystem artifact
        uses: actions/upload-artifact@v4
        with:
          name: BaseSystem
          path: /tmp/BaseSystem

  download-and-upload:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download BaseSystem artifact
        uses: actions/download-artifact@v4
        with:
          name: BaseSystem
          path: /tmp

      - name: List /tmp contents for debug
        run: ls -la /tmp

      - name: Create ZIP of BaseSystem folder
        run: |
          if [ ! -d /tmp/BaseSystem ]; then
            echo "❌ Folder /tmp/BaseSystem nie istnieje!"
            exit 1
          fi
          cd /tmp
          zip -r BaseSystem.zip BaseSystem/

      - name: Upload BaseSystem.zip to GoFile.io
        run: |
          echo "📡 Pobieram serwer GoFile..."
          RESPONSE=$(curl -s https://api.gofile.io/getServer)

          if [ -z "$RESPONSE" ]; then
            echo "❌ Brak odpowiedzi z API GoFile"
            exit 1
          fi

          SERVER=$(echo "$RESPONSE" | jq -r '.data.server // empty')

          if [ -z "$SERVER" ]; then
            echo "❌ Nie udało się uzyskać serwera z GoFile.io"
            echo "Odpowiedź API: $RESPONSE"
            exit 1
          fi

          echo "✅ Serwer: $SERVER"
          echo "⬆️ Wysyłam BaseSystem.zip..."

          UPLOAD=$(curl -s -X POST "https://$SERVER.gofile.io/uploadFile" \
            -F "file=@/tmp/BaseSystem.zip" \
            -F "description=BaseSystem from GitHub Action")

          echo "$UPLOAD" > /tmp/upload_response.json
          cat /tmp/upload_response.json

          URL=$(jq -r '.data.downloadPage // empty' /tmp/upload_response.json)

          if [ -z "$URL" ]; then
            echo "❌ Nie udało się uzyskać linku do pobrania"
            exit 1
          fi

          echo "✅ Plik dostępny pod adresem: $URL"
